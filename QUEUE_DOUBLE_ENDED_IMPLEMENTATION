#include <bits/stdc++.h> 
class Deque
{
public:
int * arr;
int front;
int rear;
int size;
    Deque(int n)
    {
        this->size=n;
        arr=new int[size];
        front=-1;
        rear=-1;

    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        if((rear+1)% size == front)
        {
            return false;
        }
        if(front==-1)
        {
            front=rear=0;
        }
        else if(front==0)
        {
            front=size-1;
        }
        else{
            front--;
        }
        arr[front]=x;
        return true;

    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        if((rear+1)%size == front)
        {
            return false;
        }

        //empty
        if(front == -1 && rear == -1)
        {
            front=rear=0;
        }
        //for circular nature
        else{
            rear=(rear+1) % size;
        }
        arr[rear]=x;
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        //empty
        if(front == -1)
        {
            return -1;
        }
        int ans=arr[front];
         //single element

         if(front == rear)
         {
             front=rear=-1;
         }
         else{
             front=(front+1) % size;
         }
         return ans;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        if(rear == -1)
        {
            return -1;
        }

        int ans=arr[rear];

        if(front == rear)
        {
            front=rear=-1;
        }
        else if(rear==0)
        {
            rear=size-1;
        }
        else{
            rear--;
        }
        return ans;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if(front == -1)
        {
            return -1;
        }
        int ans=arr[front];
        return ans;

    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        if(rear == -1)
        {
            return -1;
        }
        int ans=arr[rear];
        return ans;
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if(front==-1 && rear == -1)
        {
           return true;
        }

        return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if((rear+1) % size == front)
        {
            return true;
        }
        return false;
    }
};
