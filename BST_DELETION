/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* findMax(TreeNode* root) {
        while (root->right != NULL) {
            root = root->right;
        }
        return root;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == NULL) {
            return root;
        }

        if (root->val == key) {
            if (root->left == NULL && root->right == NULL) {
                delete root;
                return NULL;
            }
            if (root->left != NULL && root->right == NULL) {
                TreeNode* left = root->left;
                delete root;
                return left;
            }
            if (root->left == NULL && root->right != NULL) {
                TreeNode* right = root->right;
                delete root;
                return right;
            }
            if (root->left != NULL && root->right != NULL) {
                TreeNode* pred = findMax(root->left); 
                root->val = pred->val;
                root->left = deleteNode(root->left, pred->val);
            }
        } else if (key < root->val) {
            root->left = deleteNode(root->left, key);
        } else {
            root->right = deleteNode(root->right, key);
        }
        return root;
    }
};
