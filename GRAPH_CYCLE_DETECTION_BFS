#include <queue>
using namespace std;

bool isbfs(int src, vector<vector<int>>& adj, vector<bool>& visited) {
    vector<int> parent(adj.size(), -1);
    visited[src] = true;
    queue<int> q;
    q.push(src);

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        for (int neighbours : adj[node]) {
            if (!visited[neighbours]) {
                q.push(neighbours);
                visited[neighbours] = true;
                parent[neighbours] = node;
            } else if (neighbours != parent[node]) {
                // Cycle found
                return true;
            }
        }
    }
    return false;
}

string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    vector<vector<int>> adj(n+1);
    vector<bool> visited(n+1, false);

    for (int i = 0; i < m; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u); // undirected graph
    }

    for (int i = 1; i < n; i++) {
        if (!visited[i]) {
            if (isbfs(i, adj, visited)) {
                return "Yes";
            }
        }
    }

    return "No";
}
