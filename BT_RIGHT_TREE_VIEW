/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> result;
        queue<TreeNode*> q;
        if (root == NULL) {
            return result;
        }
        q.push(root); // first push root as it's always been pushed

        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode* front = q.front();
                q.pop();

                if (i == 0) { // Did this because we will push the rightmost
                              // child if existing in the level of the Binary
                              // Tree, pushed into the vector.
                    result.push_back(front->val);
                }
                // Checking for the right child if existing.
                if (front->right != NULL) {
                    q.push(front->right);
                }
                // Checking for the left child if existing.
                if (front->left != NULL) {
                    q.push(front->left);
                }
            }
        }

        return result;
    }
};
