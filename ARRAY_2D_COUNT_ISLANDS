class Solution {
public:
    int m, n;
    long long isiland(vector<vector<int>>& grid, int i, int j,
                      vector<vector<bool>>& visited) {
        if (i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 0 ||
            visited[i][j]) {
            return 0;
        }

        visited[i][j] = true;
        long long sum = grid[i][j];

        // Explore all 4 directions
        sum += isiland(grid, i + 1, j, visited); // Down
        sum += isiland(grid, i - 1, j, visited); // Up
        sum += isiland(grid, i, j + 1, visited); // Right
        sum += isiland(grid, i, j - 1, visited); // Left

        return sum;
    }

    int countIslands(vector<vector<int>>& grid, int k) {

        m = grid.size();
        n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));

        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 0 && !visited[i][j]) {
                    long long check = isiland(grid, i, j, visited);
                    if (check % k == 0) {
                        count++;
                    }
                }
            }
        }

        return count;
    }
};
