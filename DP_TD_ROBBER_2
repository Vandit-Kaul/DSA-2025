class Solution {
public:
    int solve(int i, vector<int>& nums, vector<int>& dp) {
        if (i >= nums.size()) {
            return 0;
        }
        if (dp[i] != -1) {
            return dp[i];
        }
        int take = solve(i + 2, nums, dp) + nums[i];
        int nottake = solve(i + 1, nums, dp);

        dp[i] = max(take, nottake);
        return dp[i];
    }
    int rob(vector<int>& nums) {
        vector<int> dp(nums.size() + 1, -1);

        vector<int> first, second;
        if (nums.size() == 1) {
            return nums[0];
        }
        for (int i = 0; i < nums.size(); i++) {
            if (i != 0) {
                second.push_back(nums[i]);
            }
            if (i != nums.size() - 1) {
                first.push_back(nums[i]);
            }
        }
        vector<int> dp1(first.size() + 1, -1);
        vector<int> dp2(second.size() + 1, -1);

        return max(solve(0, first, dp1), solve(0, second, dp2));
    }
};
