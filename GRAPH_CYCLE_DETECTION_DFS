bool isdfs(int node,int parent,  vector<vector<int>>& adj, vector<bool>& visited)
{
    visited[node] = true;
    
    for(int neighbour:adj[node])
    {
        if(!visited[neighbour])
        {
           bool check=isdfs(neighbour,node,adj,visited);
           if(check){
           return true;
           }
        }
        else{
               if(neighbour != parent)
               {
                   return true;
               }
        }
    }
return false;
}
string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    vector<vector<int>> adj(n+1);
    vector<bool> visited(n+1, false);

    for (int i = 0; i < m; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u); // undirected graph
    }

    for (int i = 1; i < n; i++) {
        if (!visited[i]) {
            if (isdfs(i, -1,adj, visited)) {
                return "Yes";              
            }
        }
    }

    return "No";
}
