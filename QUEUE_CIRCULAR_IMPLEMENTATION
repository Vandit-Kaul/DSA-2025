#include <bits/stdc++.h> 
class CircularQueue{
    public:
    int *arr;
    int front;
    int rear;
    int size;
    CircularQueue(int n){
        this->size=n;
        arr=new int[size];
        front=-1;
        rear=-1;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        //for fully-filled queue
        if((rear+1)%size == front)
        {
            return false;
        }
        //for empty queue
        if(front==-1 && rear==-1)
        {
            front=rear=0;
            
        }
        //for not empty queue
        else{
            
            rear=(rear+1) % size;
        } 
        arr[rear]=value;
        return true;
    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue(){
        //for empty queue
        if(front == -1)
        {
            return -1;
        }
        int ans=arr[front];
        //for single element
        if(front == rear)
        {
            front=rear=-1;
        }
        //for not empty queue
        else{
            front=(front+1)%size;
        }
        return ans;
    }
};
